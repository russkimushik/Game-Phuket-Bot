import asyncio
import aiosqlite

import config as cfg
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

import app.keyboard as kb
import sqlite3

from app.database.requests import set_user, get_eventt, get_question, get_price_event
from app.states import SignIn

conn = sqlite3.connect('db.sqlite3')
cursor = conn.cursor()
user = Router()



@user.message(CommandStart())
async def start(message: Message):
    await set_user(message.from_user.id, message.from_user.username)
    await message.delete()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! <b>\n–í—ã–±–µ—Ä–∏, –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å:</b>', parse_mode='HTML', reply_markup=kb.start)


@user.callback_query(F.data == 'SPB')
async def spb(callback: CallbackQuery):
    await callback.answer('–°–µ–π—á–∞—Å –Ω–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ —É–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã –±—É–¥–µ–º —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–∞—à–∏–º–∏ –∏–≥—Ä–∞–º–∏!', show_alert=True)

@user.callback_query(F.data == 'Phuket')
async def phuket(callback: CallbackQuery):
    cursor.execute('SELECT title, description FROM events')
    data = cursor.fetchall()
    text = ''
    for row in data:
        text+= f'\n<b>{row[0]}</b>{row[1]}\n'

    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(f'–ö–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n{text}', parse_mode='HTML',
                                     reply_markup = await kb.show_events_and_questions())

@user.callback_query(F.data.startswith('event_'))
async def get_event(callback: CallbackQuery):
    global event_info
    event_info = await get_eventt(callback.data.split('_')[1])
    global event_title
    event_title = event_info.title
    image = event_info.image
    try:
        if image == 'NoneType':
            await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {event_info.title}')
            await callback.message.edit_text(f'<b>üî•{event_info.title}üî•</b>\n{event_info.about}\n<b>üìÖ–ö–æ–≥–¥–∞?</b>\n{event_info.date}\n'
                                        f'<b>–ì–¥–µ?</b>\n{event_info.place}\n\n<b>üí∞–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: </b>{event_info.price} –±–∞—Ç'
                                        f'\n<b>‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </b>{event_info.duration}\n'
                                        f'\n<b>üöÄ –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å?</b>\n{event_info.how_to_get_there}', reply_markup=kb.in_event)
        else:
            await callback.message.delete()
            await callback.message.answer_photo(photo=image, caption=f'<b>üî•{event_info.title}üî•</b>\n{event_info.about}\n<b>üìÖ–ö–æ–≥–¥–∞?</b>\n{event_info.date}\n'
                                     f'<b>–ì–¥–µ?</b>\n{event_info.place}\n\n<b>üí∞–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: </b>{event_info.price} –±–∞—Ç'
                                     f'\n<b>‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </b>{event_info.duration}\n'
                                     f'\n<b>üöÄ –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å?</b>\n{event_info.how_to_get_there}', reply_markup=kb.in_event)
            await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {event_info.title}')
    except Exception as e:
        await callback.message.answer(e)


    @user.callback_query(F.data == 'sign_in')
    async def sign_in(callback: CallbackQuery, state: FSMContext):
        await state.set_state(SignIn.username)
        await callback.message.answer(f'–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!')
        await callback.message.answer(f'–û–∂–∏–¥–∞–π—Ç–µ, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç...')
        await asyncio.sleep(1)
        await callback.message.answer(f'–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.')
        await state.set_state(SignIn.username)
        await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫ –≤ Telegram')

    @user.message(SignIn.username)
    async def sign_name(message: Message, state: FSMContext):
        await state.update_data(username = message.text)
        await state.set_state(SignIn.name)
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è')

    @user.message(SignIn.name)
    async def sign_quntity(message: Message, state: FSMContext):
        await state.update_data(name = message.text)
        await state.set_state(SignIn.quantity)
        await message.answer(f'–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?', reply_markup=kb.quantity)

    @user.message(SignIn.quantity)
    async def sign_1qua(message: Message, state: FSMContext):
        await state.update_data(quantity = message.text)
        await state.set_state(SignIn.bank)
        await message.answer(f'–ö–∞–∫ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?', reply_markup=kb.bank)

        @user.callback_query(F.data == 'Thailand_Bank')
        async def sign_pay_tha(callback: CallbackQuery, state: FSMContext):
            await state.update_data(bank = callback.data)
            event_price = event_info.price
            data = await state.get_data()
            global total
            total = int(data['quantity'])*event_price
            await callback.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {data['quantity']}.\n–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞{event_price} –±–∞—Ç.\n–ò—Ç–æ–≥–æ: {total} –±–∞—Ç"
                                          f'\n–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {total} –±–∞—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n'
                                          f'üí≥Bangkok Bank\nSergei Lobyr\n766-0-187787')
            await callback.message.answer(f'‚¨á‚Å£–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ')
            event_price = 0
            if message == message.document:
                check = message.document
            elif message == message.photo:
                check = message.photo


        @user.callback_query(F.data == 'Rub_pay')
        async def sign_pay_rub(callback: CallbackQuery, state: FSMContext):
            await state.update_data(bank = callback.data)
            global event_price_rub
            event_price_rub = event_info.price_rub
            data = await state.get_data()
            global total
            total = int(data['quantity']) * event_price_rub
            await callback.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {data['quantity']}.\n–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞{event_price_rub} —Ä—É–±–ª–µ–π.\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±–ª–µ–π"
                                          f'\n–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {total} —Ä—É–±–ª–µ–π –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n'
                                          f'üí≥–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¢-–ë–ê–ù–ö\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –°–µ—Ä–≥–µ–π –õ.\n89811604463\n–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã\n'
                                          f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –°–µ—Ä–≥–µ–π –õ. 2200700111650874')
            await callback.message.answer(f'‚¨á‚Å£–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ')


            if message == message.document:
                check = message.document
            elif message == message.photo:
                check = message.photo

        @user.callback_query(F.data=='No_pay')
        async def sign_no_pay(callback: CallbackQuery, state: FSMContext):
            await callback.message.answer('–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏')
            event_price = 0



        @user.message(F.document)
        async def sign_doc(message: Message, state: FSMContext, bot: Bot):
            await state.update_data(check = message.document.file_id)
            data = await state.get_data()
            username = data['username']
            name = data['name']
            event = event_title
            quantity = data['quantity']
            bank = data['bank']
            pay = data['check']
            global cur
            if bank == 'Rub_pay':
                cur = '—Ä—É–±–ª–µ–π'
            else:
                cur = '–±–∞—Ç'
            try:
                async with aiosqlite.connect('db.sqlite3') as db:
                    await db.execute('INSERT INTO members ( username, name, event, quantity, bank, pay) VALUES (?, ?, ?, ?, ?, ?)', (username, name, event_title, quantity, bank, pay))
                    await db.commit()
                await message.answer(f'–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event}, —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏!', reply_markup=kb.finish)
                await bot.send_document(chat_id=cfg.ADMIN, document=data['check'])
                await bot.send_message(chat_id=cfg.ADMIN, text = f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n{event}.\n–Æ–∑–µ—Ä–Ω–µ–π–º: {data['username']},\n–ò–º—è: {data['name']},\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:{data['quantity']}\n–ë–∞–Ω–∫: {data['bank']}\n–ò—Ç–æ–≥–æ: {total} {cur}")
                await state.clear()
                event_price_rub = 0
                cur = 0

            except Exception as e:
                await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

        @user.message(F.photo)
        async def sign_doc(message: Message, state: FSMContext, bot: Bot):
            await state.update_data(check=message.photo[-1].file_id)
            data = await state.get_data()
            username = data['username']
            name = data['name']
            event = event_title
            quantity = data['quantity']
            bank = data['bank']
            pay = data['check']
            global cur
            if bank == 'Rub_pay':
                cur = '—Ä—É–±–ª–µ–π'
            else:
                cur = '–±–∞—Ç'
            try:
                async with aiosqlite.connect('db.sqlite3') as db:
                    await db.execute(
                        'INSERT INTO members ( username, name, event, quantity, bank, pay) VALUES (?, ?, ?, ?, ?, ?)',
                        (username, name, event_title, quantity, bank, pay))
                    await db.commit()
                await message.answer(f'–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event}, —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏!',
                                     reply_markup=kb.finish)
                await bot.send_photo(chat_id=cfg.ADMIN, photo=data['check'])
                await bot.send_message(chat_id=cfg.ADMIN,
                                       text=f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \n{event}.\n –Æ–∑–µ—Ä–Ω–µ–π–º: {data['username']},\n–ò–º—è: {data['name']}, \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:{data['quantity']}\n'–ë–∞–Ω–∫: {data['bank']}\n–ò—Ç–æ–≥–æ: {total} {cur}")
                await state.clear()
                event_price_rub = 0
                cur = 0

            except Exception as e:
                await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')




@user.callback_query(F.data == 'quest_2')
async def quest_2(callback: CallbackQuery):
    quest_2_info = await get_question(callback.data.split('_')[1])
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {quest_2_info.title}')
    await callback.message.delete()
    await callback.message.answer_photo(photo='AgACAgIAAxkBAAM5Z-HBdDsvIpZgsIUf5pWwJVXy4JIAAlPuMRvXehFLqwnz8NGuQA0BAAMCAAN5AAM2BA', caption=quest_2_info.description, reply_markup=kb.finish)
@user.callback_query(F.data.startswith('quest_'))
async def get_event(callback: CallbackQuery):
    quest_info = await get_question(callback.data.split('_')[1])
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {quest_info.title}')
    await callback.message.delete()
    await callback.message.answer(text=quest_info.description ,reply_markup=kb.finish)







#@user.message(F.photo)
#async def get_id_photo(message: Message):
#    await message.answer(text=message.photo[-1].file_id)